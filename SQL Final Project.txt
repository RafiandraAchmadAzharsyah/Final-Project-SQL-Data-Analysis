Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
select count (*) as total from attribute
ii. Business table = 10000 
select count (*) as total from business
iii. Category table = 10000 
select count (*) as total from category
iv. Checkin table = 10000 
select count (*) as total from checkin
v. elite_years table = 10000 
select count (*) as total from elite_years
vi. friend table = 10000 
select count (*) as total from friend
vii. hours table = 10000 
select count (*) as total from hours
viii. photo table = 10000 
select count (*) as total from photo
ix. review table = 10000 
select count (*) as total from review 
x. tip table = 10000 
select count (*) as total from tip
xi. user table = 10000 
select count (*) as total from user
	


2. Find the total distinct records by either the foreign key or primary key 
for each table. If two foreign keys are listed in the table, 
please specify which foreign key.

i. Business = 10000
select count (distinct id) as total from business
ii. Hours = 1562 
select count (distinct business_id) as total from hours
iii. Category = 2643 
select count (distinct business_id) as total from category
iv. Attribute = 1115
select count (distinct business_id) as total from attribute
v. Review = 8090 
select count (distinct business_id) as total from review
vi. Checkin = 493 
select count (distinct business_id) as total from checkin
vii. Photo = 10000 
select count (distinct id) as total from photo
viii. Tip = 537 
select count (distinct user_id) as total from tip
ix. User = 10000 
select count (distinct id) as total from user
x. Friend = 11 
select count (distinct user_id) as total from friend
xi. Elite_years = 2780 
select count (distinct user_id) as total from elite_years

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

Answer: NO
	
	
SQL code used to arrive at answer:

select id, name, review_count, yelping_since, useful, cool, fans, average_stars,
compliment_hot, compliment_more, compliment_profile, compliment_cute, compliment_list,
compliment_list, compliment_note, compliment_plain, compliment_cool, compliment_funny,
compliment_writer, compliment_photos 
from user
where NOT (id IS NOT NULL or 
        name IS NOT NULL or 
        review_count IS NOT NULL or
        yelping_since IS NOT NULL or
        useful IS NOT NULL or
        cool IS NOT NULL or
        fans IS NOT NULL or
        average_stars IS NOT NULL or
        compliment_hot IS NOT NULL or
        compliment_more IS NOT NULL or
        compliment_profile IS NOT NULL or
        compliment_cute IS NOT NULL or
        compliment_list IS NOT NULL or
        compliment_note IS NOT NULL or
        compliment_plain IS NOT NULL or
        compliment_cool IS NOT NULL or
        compliment_funny IS NOT NULL or
        compliment_writer IS NOT NULL or
        compliment_photos IS NOT NULL) 
		
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082 

select MIN (stars), MAX (stars), AVG (stars) from review		
	
ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549 

select MIN (stars), MAX (stars), AVG (stars) from business		
	
iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144 

select MIN (likes), MAX (likes), AVG (likes) from tip		
	
iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414 

select MIN (count), MAX (count), AVG (count) from checkin		
	
v. Table: User, Column: Review_count
	
		min: 0 		max: 2000	avg: 24.2995 

select MIN (review_count), MAX (review_count), AVG (review_count) from user	


5. List the cities with the most reviews in descending order:

SQL code used to arrive at answer: 

select city, sum (review_count) as review_total
from business
group by city
order by review_total desc
	
	
Copy and Paste the Result Below:

+-----------------+--------------+
| city            | review_total |
+-----------------+--------------+
| Las Vegas       |        82854 |
| Phoenix         |        34503 |
| Toronto         |        24113 |
| Scottsdale      |        20614 |
| Charlotte       |        12523 |
| Henderson       |        10871 |
| Tempe           |        10504 |
| Pittsburgh      |         9798 |
| Montréal        |         9448 |
| Chandler        |         8112 |
| Mesa            |         6875 |
| Gilbert         |         6380 |
| Cleveland       |         5593 |
| Madison         |         5265 |
| Glendale        |         4406 |
| Mississauga     |         3814 |
| Edinburgh       |         2792 |
| Peoria          |         2624 |
| North Las Vegas |         2438 |
| Markham         |         2352 |
| Champaign       |         2029 |
| Stuttgart       |         1849 |
| Surprise        |         1520 |
| Lakewood        |         1465 |
| Goodyear        |         1155 |
+-----------------+--------------+
(Output limit exceeded, 25 of 362 total rows shown)
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

	SQL code used to arrive at answer:

select stars as star_rating, count (stars) as count
from business
where city = 'Avon'
group by stars

	Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------------+-------+
| star_rating | count |
+-------------+-------+
|         1.5 |     1 |
|         2.5 |     2 |
|         3.5 |     3 |
|         4.0 |     2 |
|         4.5 |     1 |
|         5.0 |     1 |
+-------------+-------+

ii. Beachwood

	SQL code used to arrive at answer:

select stars as star_rating, count (stars) as count
from business
where city = 'Beachwood'
group by stars

	Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
		
+-------------+-------+
| star_rating | count |
+-------------+-------+
|         2.0 |     1 |
|         2.5 |     1 |
|         3.0 |     2 |
|         3.5 |     2 |
|         4.0 |     1 |
|         4.5 |     2 |
|         5.0 |     5 |
+-------------+-------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

select name, review_count
from user
order by review_count desc
limit 3	
		
	Copy and Paste the Result Below:

+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+		

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
Yes, there's correlation, more reviews will get a more fans. 
Because as you can see, the higher average number review 
it will get the higher average number of fans as well
	
	SQL code used to arrive at answer:

select
case 
    when fans between 0 and 9 then '1 - 9'
    when fans between 10 and 99 then '10 - 99'
    else '100-1000' end as fans_range,
count (*) as num_users,
avg (review_count) as average_review,
avg (fans) as average_fans
from user
group by fans_range

+------------+-----------+----------------+----------------+
| fans_range | num_users | average_review |   average_fans |
+------------+-----------+----------------+----------------+
| 1 - 9      |      9690 |  15.0085655315 | 0.447265221878 |
| 10 - 99    |       294 |  283.326530612 |  25.5986394558 |
| 100-1000   |        16 |          891.5 |         189.75 |
+------------+-----------+----------------+----------------+

9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
Yes
	
	SQL code used to arrive at answer:

select 
case
    when lower (text) like '%love%' then 'love'
    when lower (text) like '%hate%' then 'hate'
    else NULL end as reaction,
count (*) as count
from review 
group by reaction
order by reaction desc

+----------+-------+
| reaction | count |
+----------+-------+
| love     |  1780 |
| hate     |   178 |
| None     |  8042 |
+----------+-------+
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

select name, fans
from user
order by fans desc
limit 10	
	
	Copy and Paste the Result Below:

+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
	
		

Part 2: Inferences and Analysis

h1. Pick one city and category of your choice and group the businesses in that city 
or category by their overall star rating. 
Compare the businesses with 2-3 stars to the businesses with 4-5 stars 
and answer the following questions. Include your code.

Toronto and Restaurants

i. Do the two groups you chose to analyze have a different distribution of hours?

	SQL Code :
select 
case
    when stars >= 4.0 then '4-5 stars'
    when stars >= 2.0 then '2-3 stars' 
    else 'under 2.0 stars' end as star_rating,
count (distinct a.id) as id_count,
count (hours) as open_day_total,
count (hours)*1.0 / count(distinct a.id) as avg_open_days
from business a
inner join category b
on a.id = b.business_id
inner join hours h
on b.business_id = h.business_id
where a.city ='Las Vegas' and b.category='Shopping'
group by star_rating   

	Result :
+-------------+----------+----------------+---------------+
| star_rating | id_count | open_day_total | avg_open_days |
+-------------+----------+----------------+---------------+
| 2-3 stars   |        2 |             13 |           6.5 |
| 4-5 stars   |        2 |             12 |           6.0 |
+-------------+----------+----------------+---------------+

There's little difference in distribution of hours between these two groups

ii. Do the two groups you chose to analyze have a different number of reviews?

	SQL Code :

select 
case
    when stars >= 4.0 then '4-5 stars'
    when stars >= 2.0 then '2-3 stars' 
    else 'under 2.0 stars' end as star_rating,
count (distinct a.id) as id_count,
sum (review_count) as total_review,
sum (review_count)*1.0 / count (distinct a.id) as avg_total_review 
from business a
inner join category b
on a.id = b.business_id
where a.city ='Las Vegas' and b.category='Shopping'
group by star_rating        

	Result :

+-------------+----------+--------------+------------------+
| star_rating | id_count | total_review | avg_total_review |
+-------------+----------+--------------+------------------+
| 2-3 stars   |        2 |           17 |              8.5 |
| 4-5 stars   |        2 |           36 |             18.0 |
+-------------+----------+--------------+------------------+

Total review and average total review have huge difference between two groups 
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

	SQL code used for analysis:

select 
case
    when stars >= 4.0 then '4-5 stars'
    when stars >= 2.0 then '2-3 stars' 
    else 'under 2.0 stars' end as star_rating,
a.neighborhood,
a.address,
a.postal_code
from business a
inner join category b
on a.id = b.business_id
where a.city ='Las Vegas' and b.category='Shopping'
group by star_rating   		
	
	Result :

+-------------+--------------+------------------------+-------------+
| star_rating | neighborhood | address                | postal_code |
+-------------+--------------+------------------------+-------------+
| 2-3 stars   | Eastside     | 3808 E Tropicana Ave   | 89121       |
| 4-5 stars   |              | 3555 W Reno Ave, Ste F | 89118       |
+-------------+--------------+------------------------+-------------+

		
2. Group business based on the ones that are open and the ones that are closed. 
What differences can you find between the ones that are still open and 
the ones that are closed? List at least two differences and the SQL code 
you used to arrive at your answer.
		
i. Difference 1: Number of Business

         
         
ii. Difference 2: Number of Review
         
         
         
SQL code used for analysis:

select a.is_open,
count (distinct a.id) as num_business,
count (distinct b.id) as num_review,
avg (a.stars) as avg_stars
from business a
inner join review b
on a.id = b.business_id
group by a.is_open

Result :

+---------+--------------+------------+---------------+
| is_open | num_business | num_review |     avg_stars |
+---------+--------------+------------+---------------+
|       0 |           61 |         71 | 3.54225352113 |
|       1 |          446 |        565 |  3.7610619469 |
+---------+--------------+------------+---------------+	
	
3. For this last part of your analysis, you are going to choose 
the type of analysis you want to conduct on the Yelp dataset and 
are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes 
for sentiment analysis, clustering businesses to find commonalities or 
anomalies between them, predicting the overall star rating for a business, 
predicting the number of fans a user will have, and so on. 
These are just a few examples to get you started, 
so feel free to be creative and come up with your own problem 
you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

To identify which category that have most average reviews and average stars 
from the customers
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

I choose to analyze with sentiment analysis from the category, a total number of businesses,
average total review, total stars in every category, and how the average of every category is still open or functional.
I choose to visualization the category with the number of businesses that have more than 10 total,
because it's easy to analyze and for statistics reasons.

As the result, the category which are Local Services, Health & Medical, Home Services, Shopping, Beauty & Spas, 
American (Traditional), and Food. They have an amazing average number of stars. But for category Bars, Nightlife,
and Restaurants they have a bad reputation if we look from average stars. 
As you can see the type of category that have a lower reputation
will have a lower number of businesses that are still functional or open.
                                  
                  
iii. Output of your finished dataset:

+------------------------+-----------------+------------------+-----------+------------+
| category               | num_of_business | avg_total_review | avg_stars | functional |
+------------------------+-----------------+------------------+-----------+------------+
| Local Services         |              12 |              8.3 |       4.2 |       0.83 |
| Health & Medical       |              17 |             11.9 |       4.1 |       0.94 |
| Home Services          |              16 |              5.9 |       4.0 |       0.94 |
| Shopping               |              30 |             32.6 |       4.0 |       0.83 |
| Beauty & Spas          |              13 |              9.2 |       3.9 |       0.92 |
| American (Traditional) |              11 |            102.5 |       3.8 |       0.73 |
| Food                   |              23 |             77.4 |       3.8 |       0.87 |
| Bars                   |              17 |             77.8 |       3.5 |       0.65 |
| Nightlife              |              20 |             67.6 |       3.5 |        0.6 |
| Restaurants            |              71 |             63.4 |       3.5 |       0.75 |
+------------------------+-----------------+------------------+-----------+------------+         
         
iv. Provide the SQL code you used to create your final dataset:

select b.category,
count(a.id) as num_of_business,
round(avg(a.review_count),1) as avg_total_review, 
round(avg(a.stars),1) as avg_stars,
round(avg(a.is_open),2) as functional
from business a
inner join category b
on a.id=b.business_id
group by category
having num_of_business > 10
order by avg_stars desc


